name: Continous Builds

on:
  push:
    branches: [master]

env:
  QT_VERSION: 6.2.3
  OPENCV_VERSION: 4.5.5

jobs:
  job_1:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: install opencv
        run: |
            sudo apt-get update
            sudo apt-get dist-upgrade
            sudo apt-get install mesa-common-dev libgl1-mesa-dev libssl-dev
            sudo apt-get install libxcb-*
            sudo apt-get install libxkb-*
            sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libnss3
            sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
            sudo apt-get install libopencv-dev
      - name: install qt6
        run: |
          pip install aqtinstall
          python3 -m aqt install-qt -O ${{ github.workspace }}/Qt/ linux desktop ${{ env.QT_VERSION }}
          echo ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/bin/ >> $GITHUB_PATH
      - name: build
        run: |
          ./run.sh ci
          make clean
      - name: appimage
        run: |
          wget -O deploy.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x deploy.AppImage
          cp sh.fasttrack.fasttrack.desktop build/
          cp src/assets/fasttrack.png build/
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/
          ./deploy.AppImage build/fasttrack -appimage -no-translations -bundle-non-qt-libs -unsupported-allow-new-glibc -qmake=${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/bin/qmake6 -extra-plugins=platforms/,sqldrivers/ -exclude-libs=libgmodule-2.0.so
          mv FastTrack*.AppImage FastTrack-x86_64.AppImage
      - name: Linux artefact
        uses: actions/upload-artifact@v2
        with:
          name: FastTrack-x86_64.AppImage
          path: ./FastTrack-x86_64.AppImage

  job_2:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: install qt6
        run: |
          choco uninstall mingw
          pip install aqtinstall
          python3 -m aqt install-qt -O ${{ github.workspace }}/Qt/ windows desktop ${{ env.QT_VERSION }} win64_mingw
          python3 -m aqt install-tool -O ${{ github.workspace }}/Qt/ windows desktop tools_mingw90
          echo "${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/mingw_64/bin/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}/Qt/Tools/mingw900_64/bin/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: install opencv
        shell: cmd
        run: |
          choco install wget unzip
          wget https://github.com/FastTrackOrg/Windows_MinGW_64_OpenCV/releases/download/${{ env.OPENCV_VERSION }}/OpenCV_MinGW_64.zip
          unzip OpenCV_MinGW_64.zip -d ${{ github.workspace }}
      - name: build
        shell: cmd
        run: |
          cd src/
          qmake FastTrack.pro -spec win32-g++ CONFIG+="release NO_WEB"
          mingw32-make
          mingw32-make clean
          cd build/
          windeployqt FastTrack.exe --release
          cp ..\assets\icon.ico .
          cp ${{ github.workspace }}/Qt/Tools/mingw900_64/bin/libgomp-1.dll . 
          cp ${{ github.workspace }}/OpenCV_MinGW_64/bin/opencv_videoio_ffmpeg455_64.dll .
          cp ${{ github.workspace }}/OpenCV_MinGW_64/bin/libopencv_world455.dll .
      - name: Windows artefact
        uses: actions/upload-artifact@v1
        with:
          name: FastTrack
          path: src/build/

  job_3:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: install qt6
        run: |
          pip install aqtinstall
          python3 -m aqt install-qt -m qtwebengine qtwebchannel qtpositioning -O ${{ github.workspace }}/Qt/ mac desktop ${{ env.QT_VERSION }}
          echo ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/macos/bin/ >> $GITHUB_PATH
      - name: install opencv
        run: |
          rm -rf /usr/local/bin/2to3
          brew update
          brew upgrade
          brew install libomp
          brew install pkg-config
          brew install opencv
          brew install openssl
          brew unlink unixodbc
          brew install libiodbc
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
      - name: build
        run: |
          qmake src/FastTrack.pro CONFIG+=release
          make
          cd build/
          macdeployqt FastTrack.app -always-overwrite
          wget https://raw.githubusercontent.com/arl/macdeployqtfix/master/macdeployqtfix.py
          python2.7 macdeployqtfix.py FastTrack.app/Contents/MacOS/FastTrack ../../Qt/${{ env.QT_VERSION }}/
          hdiutil create -volname FastTrack -srcfolder FastTrack.app -ov -format UDZO FastTrack.dmg

      - name: Mac artefact
        uses: actions/upload-artifact@v1
        with:
          name: FastTrack.dmg
          path: ./build/FastTrack.dmg
